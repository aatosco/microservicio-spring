# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - feature-ms-abrahamTosco-mensaje

stages:
  - stage: Build_TestCobertura_PushDocker
    displayName: 'Build_TestCobertura_PushDocker Stage'
    jobs:
      - job: Build_TestCobertura_PushDocker_Job
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew'
              tasks: 'build jacocoTestReport jacocoTestCoverageVerification'
              publishJUnitResults: true
              testResultsFiles: '**/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              sonarQubeRunAnalysis: false
              spotBugsAnalysis: false
            displayName: 'Compilacion/Build'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
              pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
              reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
              failIfCoverageEmpty: true
            displayName: 'Resultado Cobertura Codigo'
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'aatosco'
              projectKey: 'aatosco_microservicio-spring'
              projectName: 'microservicio-spring'
              extraProperties: |
                sonar.pullrequest.provider=none
                sonar.scm.disabled=true
                sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/jacocoTestReport.xml
                sonar.coverage.jacoco.minimumProjectThreshol="$(min_coverage)"  
                sonar.qualitygate.wait=true
                sonar.qualitygate.conditions=blocker
                sonar.issue.squid:MaximumInheritanceDepth.severity=BLOCKER
            displayName: 'SonarCloud Prepare'

          - task: Gradle@3
            inputs:
              gradleWrapperFile: 'gradlew'
              tasks: 'sonarqube'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              sonarQubeRunAnalysis: true
              sqGradlePluginVersionChoice: 'specify'
              sonarQubeGradlePluginVersion: '3.3'
              spotBugsAnalysis: false
            displayName: 'Gradle Sonarcloud'

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'
            displayName: 'Login_Docker'

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              repository: 'aatosco/microservicio-spring'
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: |
               $(Build.BuildId)
               latest
            displayName: 'Build_Imagen_Docker'

          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              repository: 'aatosco/microservicio-spring'
              command: 'push'
              tags: |
               $(Build.BuildId)
               latest
            displayName: 'Push_Imagen_Docker'

  - stage: Deploy
    displayName: 'Deploy/Test Stage'
    dependsOn: Build_TestCobertura_PushDocker
    jobs:
      - job: Deploy_Job
        pool: 'Default'
        steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'None'
              command: 'create'
              arguments: 'deployment microservicio-spring --image=aatosco/microservicio-spring:latest'
            displayName: 'Kubernetes_Deployment'

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Start-Process "kubectl" -ArgumentList "port-forward deployment/microservicio-spring 8080:8080" -WindowStyle Hidden
            displayName: 'kubectl port-forward'
            continueOnError:  true

          - task: CmdLine@2
            inputs:
                script: |
                    jmeter -n -t microservicio-spring.jmx -l resultados_prueba.jtl
            displayName: 'Pruebas JMeter'
